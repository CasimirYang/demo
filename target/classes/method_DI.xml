<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!--单例的bean 引用非单例的bean， 每次当A调用B时，都会去get bean B, 所以如果bean B 是prototype,那每次调用都会创建一个B-->

       <!--单例的bean A-->
       <bean id="single_A" class="com.spring.lookup_method.UserManager" >
    <!--          <property name="user2" >
                     <bean scope="prototype" class="com.spring.lookup_method.User" >  这样属性的注入 这个user 还是单例的。 这里设置scope 没意义
                            <property name="name" value="ddcc" ></property>
                     </bean>
              </property>-->
              <lookup-method name="getUser" bean="non_single_B" />  <!--容器为了覆盖它所管理的bean的方法，在容器范围内查找一个bean作为返回结果。-->
       </bean>


       <!--非单例的bean B-->
       <bean id="non_single_B"  class="com.spring.lookup_method.User" init-method="init" scope="prototype"/> <!--scope如果不设置，为单例，那么就只有一个bean B了-->
       <!--这里应该有property或者constructor 设值-->


</beans>